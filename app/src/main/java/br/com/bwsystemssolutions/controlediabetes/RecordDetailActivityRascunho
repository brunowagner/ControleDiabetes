    
package br.com.bwsystemssolutions.controlediabetes;

public class RecordDetailActivityRascunho extends AppCompatActivity implements RecordAdapterOnClickHandler{
	public final EditText mDataEditText;
	public final EditText mHoraEditText;
	public final EditText mGlicemiaEditText;
	public final EditText mEventoEditText;
	public final EditText mCarboidratoEditText;
	public final EditText mInsulinaRapidaEditText;
	public final EditText mInsulinaBasalEditText;
	public final CheckBox mDoenteCheckBox;
	public final CheckBox mMedicamentoCheckBox;
	public final EditText mObservacaoEditText;
	
	public final ImageButton mTimePickerImageButton;
	public final ImageButton mDatePickerImageButton;
    TimePickerDialog mTimePickerDialog;
	DatePickerDialog mDatePickerDialog;

	Record mRecord;
    SQLiteDatabase mDb;
	
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_record_detail);
		
		mDataEditText = (EditText) findViewById(R.id.et_data_record);
		mTimePickerImageButton = (ImageButton) findViewById(R.id.ibtn_time_picker_record);
		mHoraEditText = (EditText) findViewById(R.id.et_hora_record);
		mDatePickerImageButton = (ImageButton) findViewById(R.id.ibtn_date_picker_record);
		mGlicemiaEditText = (EditText) findViewById(R.id.et_glicemia_record);
		mEventoEditText = (EditText) findViewById(R.id.et_evento_record);
		mCarboidratoEditText = (EditText) findViewById(R.id.et_carboidrato_record);
		mInsulinaRapidaEditText = (EditText) findViewById(R.id.et_insulina_rapida_record);
		mInsulinaBasalEditText = (EditText) findViewById(R.id.et_insulina_basal_record);
		mDoenteCheckBox = (CheckBox) findViewById(R.id.cb_doente_record);
		mMedicamentoCheckBox = (CheckBox) findViewById(R.id.et_medicamento_record);
		mObservacaoEditText = (EditText) findViewById(R.id.et_observacao_record);
		
		mTimePickerImageButton.setOnClickListener(new RecordDetailActivityRascunho.ClickHandler());
		
		mDatePickerImageButton.setOnClickListener(new RecordDetailActivityRascunho.ClickHandler());
		
		Intent intentThatStartedThisActivity = getIntent();

        if (intentThatStartedThisActivity.hasExtra(Record.BUNDLE_STRING_KEY)){
            Bundle bundle = intentThatStartedThisActivity.getExtras();
            mBolusTimeBlockData = (Record) bundle.getSerializable(Record.BUNDLE_STRING_KEY);
        }
    }
	
	
	@Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.menu_save_delete, menu);

        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        int id = item.getItemId();

        if (id == R.id.action_save){
            boolean executed = saveData();

            if (executed){
                Toast.makeText(getApplicationContext(), "Salvo!", Toast.LENGTH_SHORT).show();
                finish();
                return true;
            } else {
                Toast.makeText(getApplicationContext(), "Não foi possível salvar!", Toast.LENGTH_SHORT).show();
            }
        }
        return super.onOptionsItemSelected(item);
    }
	
	
	public class RecordDetailActivityRascunho.ClickHandler implements View.OnClickListener, TimePickerDialog.OnTimeSetListener, DatePickerDialog.OnDateSetListener{
		@Override
		public void onClick(View v) {
			int id = v.getId();
			
			switch (id){
				case R.id.ibtn_time_picker_record:
					callTimePiker();
					break;
				case R.id.ibtn_date_picker_record:
					callDatePiker();
			}
		}
		
		@Override
					
		public void onDateSetonDateSet(DatePicker view, int year, int month, int dayOfMonth) {
			Date date = new Date (year,month,dayOfMonth);
			String formatedDate = String.format("dd/MM/yyyy", date);
			
			mDataEditText.setText(formatedDate);
		}
		
		@Override
		public void onTimeSet(TimePicker view, int hourOfDay, int minute) {
			String timeSeted = String.format("%02d:%02d", hourOfDay, minute);

			mHoraEditText.setText(timeSeted);
		}
		
		private void callTimePiker(){
			Calendar calendar = Calendar.getInstance();
			int currentHour = calendar.get(Calendar.HOUR_OF_DAY);
			int currentMin = calendar.get(Calendar.MINUTE);
			mTimePickerDialog = new TimePickerDialog(this,this,currentHour,currentMin,true);
			mTimePickerDialog.show();
		}
		
		private void callDatePiker(){
			Calendar calendar = Calendar.getInstance();
			int currentYear = calendar.get(Calendar.YEAR);
			int currentMonth = calendar.get(Calendar.MONTH);
			int currentDay = calendar.get(Calendar.DAY_OF_MONTH);
			mDatePickerDialog = new DatePickerDialog(this, this, currentYear, currentMonth, currentDay)
			mDatePickerDialog.show();
		}
	}
	
}
